title:: getSpec

summary:: Using Specs for proxy parameters: getSpec, addSpec, and specs
categories:: Guides
related:: Classes/NodeProxy, Classes/PatternProxy, Classes/Halo, Classes/Object

section:: Using Specs for proxy parameters: getSpec, addSpec, and specs

JITLib proxies like PatternProxy (and thus TaskProxy, Pdef, and Tdef)
and NodeProxy/Ndef and other objects have numerical settings, for which
defining a Spec is useful: a practical mininum, maximum and curve (warp).

getSpec and addSpec provide a general interface for proxies and
all other objects that use .set methods for named parameters.
This makes it easy to set and access ranges for parameters,
e.g. for GUIs and other interfaces:

code::
Tdef(\x).set(\myfreq, 345);
Tdef(\x).addSpec(\myfreq, [30, 3000, \exp]);
Tdef(\x).gui; // gui uses myfreq spec automatically
// specs are accessed with:
Tdef(\x).getSpec(\myfreq);
// or this gets a dict with all known specs
Tdef(\x).getSpec;
// when you change a spec later to tune it,
// the gui immediately uses it.
Tdef(\x).addSpec(\myfreq, [50, 5000, \exp]);
// specs are also used for setting params with unipolar values:
Tdef(\x).setUni(\myfreq, 0.5); // center of range is 500
Tdef(\x).getUni(\myfreq);
// this guarantees that values stay within the range,
// and is easy to use with controllers, e.g. hardware sliders.
::

For historical reasons, NodeProxy (and Ndef) has two ways to define a spec for a given parameter name:

code::
// by implicit spec in the synth function(s), as in
Ndef(\x, { Pulse.ar(\freqx.kr(200, spec: [3, 300, \exp])) })

// and in the general JITLib way by addSpec (Halo).
Ndef(\x).addSpec(\freqx, [3, 300, \exp])
::

As the specs for the same parameter name can be different in these two places, it is necessary to decide which one will be used. In JITLibExtensions, code::addSpec / Halo:: gets priority over implicit specs; so if nothing is found in the code::Halo::, then we look in code::proxy.specs::.

This precedence is useful for tuning specs while the sound continues:
once a good spec is found, one can place it back in the synth func.
If you always prefer to use implicit specs, just use implicit specs only,
or at least avoid also using addSpec for the same parameter name.

subsection:: Tests and Examples for using addSpec and implicit specs
code::
Ndef(\x).clear;
Ndef(\x).getSpec; // empty Event
Ndef(\x).getSpec(\freqx); // nil

// define an implicit spec in synthfunc:
Ndef(\x, { Pulse.ar(\freqx.kr(200, spec: [3, 300, \exp])) * 0.1 });
// it should be here:
Ndef(\x).specs;
// findFirstSpecFor should find it too
Ndef(\x).findFirstSpecFor(\freqx);
// and getSpec finds it
Ndef(\x).getSpec(\freqx);

Ndef(\x).addSpec(\ampx, \amp);

Ndef(\x).getSpec; // gets both synth specs and halo specs

// use addSpec to set ranges: the newly added explicit spec is used
Ndef(\x).addSpec(\freqx, [5, 500, \exp]);
Ndef(\x).getSpec(\freqx);
Ndef(\x).getSpec

// when we remove the explicit spec again ..
Ndef(\x).addSpec(\freqx, nil);
// we see the implicit one again.
Ndef(\x).getSpec(\freqx);

// test that getSpec also works in NdefPreset:
Ndef(\tst, { SinOsc.ar(\freqsin.kr(400, spec: \freq)) }).gui;

NdefPreset(Ndef(\tst)).addSet(\set_1); // add a setting
NdefPreset(Ndef(\tst)).setRand(1.0).addSet(\set_2); // and s second
NdefPreset(Ndef(\tst)).morph(0.5, \set_1, \set_2); // morph

// test using a global spec implicitly:
Ndef(\x, { Pulse.ar(\lofreq.kr(200)) * 0.1 });
Ndef(\x).getSpec(\lofreq); // look by name
// use getSpec to get all specs, then look
Ndef(\x).getSpec.lofreq; //-> found in Spec.specs

// if you use patches with implicit specs that you will not change,
// you can speed up access to them by adding them to the halo specs:
Ndef(\x).addImplicitSpecsToHalo;
::
